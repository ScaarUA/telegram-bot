import axios from 'axios';
import bot from "./bot.js";
import openai from "./openAi.js";
import {makeTenorRequest} from "./tenor.js";
import {getLeftTime} from "./helpers.js";

export const katkuHandler = async (msg) => {
    const chatId = msg.chat.id;

    const gameQuestionMessage = await bot.sendMessage(chatId, '–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã', { reply_to_message_id: msg.message_id });

    const replyGameId = bot.onReplyToMessage(chatId, gameQuestionMessage.message_id, async (replyGameMsg) => {
        bot.removeReplyListener(replyGameId)

        const game = replyGameMsg.text;

        const timeQuestionMessage = await bot.sendMessage(chatId, '–í –∫–æ—Ç–æ—Ä–æ–º —á–∞—Å—É?', { reply_to_message_id: gameQuestionMessage.message_id });

        const replyTimeId = bot.onReplyToMessage(chatId, timeQuestionMessage.message_id, async (replyTimeMsg) => {
            bot.removeReplyListener(replyTimeId);

            const time = replyTimeMsg.text;

            if (!time || !time.match(/^\d\d?[:\-\s]\d\d$/)) {
                return bot.sendMessage(chatId, '–¢—ã —à–æ –¥–∞—É–Ω? —É–∫–∞–∂–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤—Ä–µ–º—è. 21:30, –Ω–∞–ø—Ä–∏–º–µ—Ä');
            }

            const [hours, minutes] = time.split(':');
            const targetDate = new Date().setHours(hours, minutes);

            const pollMsg = await bot.sendPoll(chatId,`–°–µ–≥–æ–¥–Ω—è –≥—Ä–∞–µ–º ${game} –≤ ${time}?`, ['–î–∞', '–ü–æ–∑–∂–µ –±—É–¥—É', '–Ø –ø–∞–π–¥–æ—Ä'] , { is_anonymous: false });

            const timerMsg = await bot.sendMessage(chatId, `–î–æ –∫–æ–Ω—Ü–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: ${getLeftTime(targetDate).text}`);

            const interval = setInterval(async () => {
                const { timer, text: leftTimeText } = getLeftTime(targetDate);

                bot.editMessageText(`–î–æ –∫–æ–Ω—Ü–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: ${leftTimeText}`, { message_id: timerMsg.message_id, chat_id: chatId });

                if (timer <= 0) {
                    clearInterval(interval);

                    const stoppedPollMsg = await bot.stopPoll(chatId, pollMsg.message_id);
                    const yesAmount = stoppedPollMsg.options[0].voter_count;
                    const laterAmount = stoppedPollMsg.options[1].voter_count;
                    const noAmount = stoppedPollMsg.options[2].voter_count;
                    let yesMessage = `–ï—Å—Ç—å –±–æ–π—Ü—ã –¥–ª—è –∫–∞—Ç–∫–∏: ${yesAmount}`;
                    let laterMessage = '–ù–∏–∫–æ–≥–æ –Ω–∞ –ø–æ–∑–∂–µ –Ω–µ—Ç—É';
                    let noMessage;

                    if (yesAmount < 3) {
                        yesMessage = `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –±–æ–π—Ü–æ–≤. –ù–∞ ${time} –∏—Ö —Ç–æ–ª—å–∫–æ ${yesAmount}`;
                    }

                    if (laterAmount > 0) {
                        laterMessage = `–ü–æ–∑–∂–µ —Å–º–æ–≥—É—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –±–æ–π—Ü–æ–≤: ${laterAmount}`;
                    }

                    if (noAmount > 0) {
                        noMessage = `–ö—Å—Ç–∞—Ç–∏ —Å—Ä–µ–¥–∏ –Ω–∞—Å –µ—Å—Ç—å –ø–∞–π–¥–æ—Ä—ã`;
                    }

                    bot.sendMessage(chatId, `${yesMessage}\n${laterMessage}${noMessage ? `\n${noMessage}` : ''}`);
                }
            }, 5000);
        });
    });
}

export const smac10Handler = stickerSet => msg => {
    const chatId = msg.chat.id;

    const sticker = stickerSet.stickers.find(sticker => sticker.emoji === 'üôè');

    bot.sendSticker(chatId, sticker.file_id);
}

export const insultHandler = async (msg, match) => {
    const chatId = msg.chat.id;

    const address = match[1];

    const res = await axios('https://evilinsult.com/generate_insult.php?lang=ru&type=json');

    const insult = res.data.insult[0].toLowerCase() + res.data.insult.slice(1);

    bot.sendMessage(chatId, `${address ? address + ', ' : ''}${insult}`);
}

export const createImageHandler = async (msg, match) => {
    const chatId = msg.chat.id;

    const prompt = match[1];

    try {
        const res = await openai.createImage({
            prompt,
            size: '256x256',
        });

        bot.sendPhoto(chatId, res.data.data[0].url);
    } catch (e) {
        bot.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É");
    }
}

export const createGifHandler = async (msg, match) => {
    const chatId = msg.chat.id;

    const prompt = match[1];

    try {
        const res = await makeTenorRequest(prompt);

        const results = res.data.results;

        const randomIndex = Math.floor(Math.random() * results.length);

        bot.sendAnimation(chatId, results[randomIndex].media_formats.gif.url);
    } catch (e) {
        bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å gif\'–∫—É');
    }
}